import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './ChatBot.css'; // Add CSS file for styling

const ChatBot = () => {
  const [messages, setMessages] = useState([]);
  const [userInput, setUserInput] = useState('');
  const [showChat, setShowChat] = useState(false); // Control chat visibility
  const [hasNotification, setHasNotification] = useState(false); // Notification flag
  const [topic, setTopic] = useState('General Conversation'); // Default topic

  useEffect(() => {
    // Simulated notification logic (you'll need to implement your own)
    if (hasNotification) {
      setTimeout(() => {
        setHasNotification(false);
      }, 5000); // Hide notification after 5 seconds
    }
  }, [hasNotification]);

  const handleInputChange = (event) => {
    setUserInput(event.target.value);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    if (userInput.trim() !== '') {
      setMessages([...messages, { role: 'user', content: userInput }]);
      setUserInput('');
      try {
        const response = await axios.post('/your-api-endpoint', {
          message: userInput,
          topic: topic,
        });
        setMessages([...messages, { role: 'assistant', content: response.data.message }]);
        setHasNotification(true); // Trigger notification on new response
      } catch (error) {
        console.error('Error fetching chatbot response:', error);
      }
    }
  };

  const toggleChat = () => {
    setShowChat(!showChat);
  };

  const handleTopicChange = (event) => {
    setTopic(event.target.value);
  };

  return (
    <div className="chatbot-container">
      {/* Notification (will be visible when hasNotification is true) */}
      {hasNotification && (
        <div className="notification">
          <span>New message from the chatbot!</span>
        </div>
      )}

      {/* Chat button in the bottom right corner */}
      <button className="chat-button" onClick={toggleChat}>
        ðŸ’¬
      </button>

      {/* Chat window (only visible when showChat is true) */}
      {showChat && (
        <div className="chat-window">
          <div className="chat-header">
            <h3>Chatbot</h3>
            <button onClick={toggleChat}>
              <span className="close-icon">âœ•</span>
            </button>
          </div>
          <div className="chat-messages">
            {messages.map((message, index) => (
              <div key={index} className={`message ${message.role}`}>
                {message.content}
              </div>
            ))}
          </div>
          <form onSubmit={handleSubmit}>
            <input
              type="text"
              placeholder="Type your message..."
              value={userInput}
              onChange={handleInputChange}
            />
            <button type="submit">Send</button>
          </form>
          <select value={topic} onChange={handleTopicChange}>
            <option value="General Conversation">General Conversation</option>
            <option value="Science">Science</option>
            <option value="History">History</option>
            {/* Add more topics as needed */}
          </select>
        </div>
      )}
    </div>
  );
};

export default ChatBot;